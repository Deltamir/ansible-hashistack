- hosts: localhost
  tasks:
    - name: Ensure python and dependencies are installed
      apt:
        name: '{{ packages }}'
      vars:
        packages:
          - python3
          - python3-pip
          - python3-setuptools
          - python3-virtualenv
      become: true

    - name: Install docker python package
      pip:
        name: '{{ packages }}'
        executable: pip3
      vars:
        packages:
          - boto3
          - hvac
      become: true

    - name: retrieve Consul Gossip key from AWS Secrets Manager
      set_fact:
        consul_gossip_key: "{{ lookup('amazon.aws.aws_secret', 'paquerettes_consul_key', region='eu-west-3', on_missing='skip',
   aws_access_key=lookup('env','AWS_ACCESS_KEY'), aws_secret_key=lookup('env','AWS_SECRET_KEY')) }}"

    - debug:
        msg: "{{ consul_gossip_key }}"
    
    - debug:
        msg: "{{ consul_gossip_key == [] }}"

    - name: Generate a consul encyption key
      local_action:
        module: command
        cmd: openssl rand -base64 32
      register: encryption_key
      run_once: yes
      when: consul_gossip_key == [] or consul_key_force_rotate

    - name: Upload Consul Gossip key to AWS Secrets Manager
      community.aws.aws_secret:
        name: 'paquerettes_consul_key'
        state: present
        secret: "{{ encryption_key.stdout }}" 
        secret_type: 'string'
        region: eu-west-3
      when: consul_gossip_key == [] or consul_key_force_rotate

    - name: Register Consul Gossip key
      set_fact:
        consul_gossip_key:  "{{ encryption_key.stdout }}" 
      when: consul_gossip_key == [] or consul_key_force_rotate

    - name: retrieve Nomad Gossip key from AWS Secrets Manager
      set_fact:
        nomad_gossip_key: "{{ lookup('amazon.aws.aws_secret', 'paquerettes_nomad_key', region='eu-west-3', on_missing='skip',
   aws_access_key=lookup('env','AWS_ACCESS_KEY'), aws_secret_key=lookup('env','AWS_SECRET_KEY')) }}"

    - name: Generate a nomad encyption key
      local_action:
        module: command
        cmd: openssl rand -base64 32
      register: encryption_key
      run_once: yes
      when: nomad_gossip_key == [] or nomad_key_force_rotate

    - name: Upload Nomad Gossip key to AWS Secrets Manager
      community.aws.aws_secret:
        name: 'paquerettes_nomad_key'
        state: present
        secret: "{{ encryption_key.stdout }}" 
        secret_type: 'string'
        region: eu-west-3
      when: nomad_gossip_key == [] or nomad_key_force_rotate

    - name: Register Nomad Gossip key
      set_fact:
        nomad_gossip_key:  "{{ encryption_key.stdout }}" 
      when: nomad_gossip_key == [] or nomad_key_force_rotate

- name: Assemble Consul cluster
  hosts: consul_instances
  vars:
    consul_raw_key: "{{ hostvars['localhost'].consul_gossip_key }}"
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - {role: ansible-consul}

- hosts: localhost
  tasks:
    - name: create aws key
      community.aws.aws_kms:
        alias: vault-enc-key
        enable_key_rotation: true
        tags:
            Name: vault-enc-key
            Purpose: Encrypt S3 containing unseal and root token
        region: eu-west-3
      register: kms_key
      run_once: true
    
- name: Install Vault cluster
  hosts: vault_instances
  vars:
    vault_awskms_key_id: "{{ hostvars['localhost'].kms_key.key_arn }}"
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - {role: ansible-vault}

- hosts: localhost
  tasks:
    - name: init Vault
      hashivault_init:
        recovery_shares: 1
        recovery_threshold: 1
        url: "http://{{ groups['vault_instances'][0] }}:8200"
      register: vault_init
      run_once: yes

    - name: Add root token to AWS Secrets Manager
      community.aws.aws_secret:
        name: 'paquerettes_vault_root_token'
        state: present
        secret_type: 'string'
        secret: "{{ vault_init.root_token }}"
        region: eu-west-3
      when: vault_init['changed'] == true

    - name: retrieve root token from AWS Secrets Manager
      set_fact:
        root_token: "{{ lookup('amazon.aws.aws_secret', 'paquerettes_vault_root_token', region='eu-west-3',
   aws_access_key=lookup('env','AWS_ACCESS_KEY'), aws_secret_key=lookup('env','AWS_SECRET_KEY')) }}"

    - name: Create nomad-server policy
      hashivault_policy:
        token: "{{ root_token }}"
        name: nomad-server
        rules_file : nomad-server-policy.hcl
        url: "http://vault.service.consul:8200"

    - name: create nomad-cluster token role
      uri:
        url: http://vault.service.consul:8200/v1/auth/token/roles/nomad-cluster
        method: POST
        body: "{{ lookup('file','nomad-cluster-role.json') }}"
        body_format: json
        status_code: [200, 204]
        headers:
          X-Vault-Token: "{{ root_token }}"

    - name: Create a nomad token
      community.hashi_vault.vault_token_create:
        url: http://vault.service.consul:8200
        policies: ["nomad-server"]
        orphan: true
        period: "72h"
        token: "{{root_token}}"
      register: "nomad_vault_token"

- name: Installing Nomad
  hosts: nomad_instances
  vars:
    nomad_vault_token: "{{ hostvars['localhost'].nomad_vault_token.login.auth.client_token }}"
    nomad_encrypt: "{{ hostvars['localhost'].nomad_gossip_key }}"
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - {role: ansible-nomad}
