- hosts: localhost
  tasks:
    - name: Ensure python and dependencies are installed
      apt:
        name: '{{ packages }}'
      vars:
        packages:
          - python3
          - python3-pip
          - python3-setuptools
          - python3-virtualenv
      become: true

    - name: Install docker python package
      pip:
        name: '{{ packages }}'
        executable: pip3
      vars:
        packages:
          - boto3
          - hvac
      become: true

    - name: Authenticate with JWT against HCP
      community.hashi_vault.vault_login:
        auth_method: jwt
        jwt: "{{ lookup('env', 'CI_JOB_JWT') }}"
        role_id: gitlab-jwt
        mount_point: gitlab-jwt
      register: hcp_vault_token

    - name: Set fact for JWT
      set_fact:
        hcp_vault_token: "{{ hcp_vault_token.login.auth.client_token }}"

- hosts: localhost
  environment:
    VAULT_TOKEN: "{{ hcp_vault_token }}"
  tasks:
    - name: enable kv-v1 secret engine on HCP
      hashivault_secret_engine:
        backend: kv
        name: gitlab/kv

    - name: retrieve Consul Gossip key from HCP
      community.hashi_vault.vault_kv1_get:
        engine_mount_point: gitlab/kv
        path: consul_gossip_key
      ignore_errors: yes
      register: consul_gossip_result

    - name: Generate a consul encyption key
      local_action:
        module: command
        cmd: openssl rand -base64 32
      register: encryption_key
      when: consul_gossip_result['failed'] == true

    - name: write consul gossip encryption key to HCP
      hashivault_secret:
        secret: "consul_gossip_key"
        data:
          key: "{{ encryption_key.stdout }}"
        verify: no
        version: 1
        mount_point: "gitlab/kv"
      when: consul_gossip_result['failed'] == true

    - name: Register Consul Gossip key if necessary
      set_fact:
        consul_gossip_key:  "{{ encryption_key.stdout }}" 
      when: consul_gossip_result['failed'] == true

    - name: Register Consul Gossip key if necessary
      set_fact:
        consul_gossip_key:  "{{ consul_gossip_result.data.key }}" 
      when: consul_gossip_result['failed'] == false

    - name: retrieve Nomad Gossip key from HCP
      community.hashi_vault.vault_kv1_get:
        engine_mount_point: gitlab/kv
        path: nomad_gossip_key
      ignore_errors: yes
      register: nomad_gossip_result

    - name: Generate a nomad encyption key
      local_action:
        module: command
        cmd: openssl rand -base64 32
      register: encryption_key
      when: nomad_gossip_result['failed'] == true

    - name: write nomad gossip encryption key to HCP
      hashivault_secret:
        secret: "nomad_gossip_key"
        data:
          key: "{{ encryption_key.stdout }}"
        verify: no
        version: 1
        mount_point: "gitlab/kv"
      when: nomad_gossip_result['failed'] == true

    - name: Register Nomad Gossip key if necessary
      set_fact:
        nomad_gossip_key:  "{{ encryption_key.stdout }}" 
      when: nomad_gossip_result['failed'] == true

    - name: Register Nomad Gossip key if necessary
      set_fact:
        nomad_gossip_key:  "{{ nomad_gossip_result.data.key }}"
      when: nomad_gossip_result['failed'] == false

    - name: enable transit secret engine on GCP
      hashivault_secret_engine:
        backend: transit
        name: gitlab/transit
        
    - name: create autounseal secret on HCP
      community.hashi_vault.vault_write:
        path: gitlab/transit/keys/autounseal

    - name: Create autounseal policy on HCP
      hashivault_policy:
        name: autounseal
        rules_file : autounseal.hcl 

    - name: Create a autounseal token from HCP
      community.hashi_vault.vault_token_create:
        policies: ["autounseal", "default"]
        orphan: true
      register: autounseal_token

    - name: Create consul_gossip policy on HCP
      hashivault_policy:
        name: consul_gossip
        rules_file : consul_gossip-policy.hcl 

    - name: Create a consul_gossip_token from HCP
      community.hashi_vault.vault_token_create:
        policies: ["consul_gossip", "default"]
        orphan: true
      register: consul_gossip_token

    - name: Create nomad_gossip policy on HCP
      hashivault_policy:
        name: nomad_gossip
        rules_file : nomad_gossip-policy.hcl

    - name: Create a nomad_gossip_token from HCP
      community.hashi_vault.vault_token_create:
        policies: ["nomad_gossip", "default"]
        orphan: true
      register: nomad_gossip_token
      

- name: Assemble Consul cluster
  hosts: consul_instances
  vars:
    consul_raw_key: "{{ hostvars['localhost'].consul_gossip_key }}"
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - {role: ansible-consul}

- hosts: vault_instances
  vars:
    autounseal_token: "{{ hostvars['localhost'].autounseal_token.login.auth.client_token }}"
  tasks:
    - name: Ensures vault config dir exists
      file: 
        path: /etc/vault.d/
        state: directory
      become: true

    - name: Copy vault seal config script 
      template:
        src: vault_seal.j2
        dest: /etc/vault.d/vault_seal.hcl
      become: true

- name: Install Vault cluster
  hosts: vault_instances
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - {role: ansible-vault}

- hosts: localhost
  environment:
    VAULT_TOKEN: "{{ hcp_vault_token }}"
  tasks:
    - name: init Vault
      hashivault_init:
        recovery_shares: 1
        recovery_threshold: 1
        url: "http://{{ groups['vault_instances'][0] }}:8200"
      register: vault_init
      run_once: yes

    - name: Write root token to HCP
      hashivault_secret:
        secret: "vault_root_token"
        data:
          key: "{{ vault_init.root_token }}"
        verify: no
        version: 1
        mount_point: "gitlab/kv"
      when: vault_init['changed'] == true

    - name: retrieve root token from HCP
      community.hashi_vault.vault_kv1_get:
        engine_mount_point: gitlab/kv
        path: vault_root_token
      ignore_errors: yes
      register: root_token

    - name: Sleep for 30s if vault was not initialized
      ansible.builtin.wait_for:
        timeout: 30
      when: vault_init['changed'] == true

    - name: Create nomad-server policy on local vault
      hashivault_policy:
        token: "{{ root_token.data.key }}"
        name: nomad-server
        rules_file : nomad-server-policy.hcl
        url: "http://vault.service.consul:8200"

    - name: create nomad-cluster token role on local vault
      community.hashi_vault.vault_write:
        token: "{{ root_token.data.key }}"
        url: http://vault.service.consul:8200
        path: auth/token/roles/nomad-cluster
        data: "{{ lookup('file','nomad-cluster-role.json') | from_json }}"

    - name: Create a nomad token from local vault
      community.hashi_vault.vault_token_create:
        url: http://vault.service.consul:8200
        policies: ["nomad-server"]
        orphan: true
        period: "72h"
        token: "{{ root_token.data.key }}"
      register: "nomad_vault_token"

- name: Installing Nomad
  hosts: nomad_instances
  vars:
    nomad_vault_token: "{{ hostvars['localhost'].nomad_vault_token.login.auth.client_token }}"
    nomad_encrypt: "{{ hostvars['localhost'].nomad_gossip_key }}"
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - {role: ansible-nomad}


- hosts: consul_instances
  vars:
    consul_gossip_token: "{{ hostvars['localhost'].consul_gossip_token.login.auth.client_token }}"
    nomad_gossip_token: "{{ hostvars['localhost'].nomad_gossip_token.login.auth.client_token }}"
  tasks:
    - name: get consul-template checksums
      uri:
        url: "{{ hashicorp_url }}/{{ consul_template_uri }}/{{ consul_template_version }}/consul-template_{{ consul_template_version }}_SHA256SUMS"
        return_content: true
      become: true
      register: checksums

    - name: download consul-template binary
      get_url:
        url: "{{ hashicorp_url }}/{{ consul_template_uri }}/{{ consul_template_version }}/consul-template_{{ consul_template_version }}_linux_arm.zip"
        dest: "/opt/consul-template.zip"
        checksum: "sha256:{{ item.split(' ').0 }}"
        mode: 0777
      when: item is search("linux_arm.zip")
      with_items: "{{ checksums.content.split('\n') }}"
      become: yes

    - name: unzip consul-template library
      unarchive:
        src: "/opt/consul-template.zip"
        dest: /usr/bin
        remote_src: yes
      become: yes
  
    - name: Ensures template data dir exists for consul
      file: 
        path: /opt/consul/templates
        state: directory
      become: true

    - name: Ensures template data dir exists for nomad
      file: 
        path: /opt/nomad/templates
        state: directory
      become: true

    - name: Copy consul-template consul gossip rotation conf file
      template:
        src: consul_gossip_rotation.hcl.j2
        dest: /opt/consul/templates/consul_gossip_rotation.hcl
        owner: consul
        mode: '0644'
      become: yes

    - name: Copy consul-template nomad gossip rotation conf file
      template:
        src: nomad_gossip_rotation.hcl.j2
        dest: /opt/nomad/templates/nomad_gossip_rotation.hcl
        mode: '0644'
      become: yes
    
    - name: Copy consul gossip_key tpl file to temp
      copy:
        src: consul_gossip.key.tpl
        dest: /opt/consul/templates/gossip.key.tpl
        owner: consul
        mode: '0644'
      become: yes

    - name: Copy nomad gossip_key tpl file to temp
      copy:
        src: nomad_gossip.key.tpl
        dest: /opt/nomad/templates/gossip.key.tpl
        mode: '0644'
      become: yes

    - name: Copy consul rotate_key script to temp
      template:
        src: consul_rotate_key.sh.j2
        dest: /opt/consul_rotate_key.sh
        owner: consul
        mode: '0744'
      become: yes

    - name: Copy nomad rotate_key script to temp
      template:
        src: nomad_rotate_key.sh.j2
        dest: /opt/nomad_rotate_key.sh
        mode: '0744'
      become: yes
