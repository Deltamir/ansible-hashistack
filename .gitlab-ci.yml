---
variables:
  DEBIAN_BUILD_IMAGE: arm32v7/debian:12.0
  ANSIBLE_IMAGE: cytopia/ansible:2.13-tools
  ANSIBLE_LINT_IMAGE: haxorof/ansible-lint:v6
  GITLEAKS_IMAGE: zricethezav/gitleaks:v8.16.3
  PUSHRM_CI_IMAGE: chko/docker-pushrm:1.9.0
  YQ_CI_IMAGE: mikefarah/yq:4.34.1
  ANSIBLE_VERSION: 2.10.7+merged+base+2.10.8+dfsg-1
  ANSIBLE_FORCE_COLOR: "true"
  ANSIBLE_REQUIREMENTS_FILE: "requirements.yml"
  GITLEAKS_ARGS: "--verbose"
  DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD: 'HIGH,CRITICAL'
  ANSIBLE_ROLE: "${DOCKER_REGISTRY_RELEASE_USER}/ansible_hashistack"
  SEMREL_CHANGELOG_ENABLED: 'true'
  SEMREL_AUTO_RELEASE_ENABLED: 'true'
  SEMREL_INFO_ON: 'protected'
  GIT_COMMITTER_EMAIL: "$GIT_AUTHOR_EMAIL"
  AUTODEPLOY_TO_PROD: 'true'
  REGISTRY_IMAGE: "${DOCKER_REGISTRY_RELEASE_USER}/${CI_PROJECT_NAME}"
  DOCKER_RELEASE_IMAGE: "index.docker.io/$REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"

stages:
  - test
  - build
  - package-build
  - package-test
  - publish

include:
  - project: 'to-be-continuous/semantic-release'
    ref: '3.3.1'
    file: '/templates/gitlab-ci-semrel.yml'
  - project: 'to-be-continuous/docker'
    ref: '4.0.0'
    file: '/templates/gitlab-ci-docker.yml'

ansible-lint:
  stage: test
  image:
    name: $ANSIBLE_LINT_IMAGE
    entrypoint: [""]
  script:
    - ansible-lint handlers/*.yml -w no-handler -w no-changed-when
    - ansible-lint tasks/*.yml -w no-handler -w no-changed-when
    - ansible-lint vars/*.yml -w no-handler -w no-changed-when
  tags:
    - vps

gitleaks:
  stage: test
  image:
    name: $GITLEAKS_IMAGE
    entrypoint: [ "" ]
  variables:
    GIT_DEPTH: 0
  before_script:
    - mkdir -p ./gitleaks
  script:
    - gitleaks detect --source . --report-path ./gitleaks/gitleaks-report.json $GITLEAKS_ARGS
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - gitleaks/
  tags:
    - vps

docker-hadolint:
  stage: test

#override to avoid bug with custom docker config
docker-kaniko-build:
  script:
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --cache --cache-dir=$KANIKO_CACHE_DIR
      --destination "${DOCKER_SNAPSHOT_IMAGE}"
      --build-arg "ANSIBLE_VERSION=${ANSIBLE_VERSION}"
      --build-arg "CI_COMMIT_SHA=${CI_COMMIT_SHA}"
      --build-arg "DEBIAN_BUILD_IMAGE=${DEBIAN_BUILD_IMAGE}"
      --digest-file .img-digest.txt
      $DOCKER_METADATA
    - docker_digest=$(cat .img-digest.txt)
    - docker_repository=${DOCKER_SNAPSHOT_IMAGE%:*}
    - docker_tag=${DOCKER_SNAPSHOT_IMAGE##*:}
    - echo "docker_image=$DOCKER_SNAPSHOT_IMAGE" > docker.env
    - echo "docker_image_digest=$docker_repository@$docker_digest" >> docker.env
    - echo "docker_repository=$docker_repository" >> docker.env
    - echo "docker_tag=$docker_tag" >> docker.env
    - echo "docker_digest=$docker_digest" >> docker.env

galaxy-read-description:
  stage: build
  image:
    name: $YQ_CI_IMAGE
    entrypoint: [ "" ]
  script:
    - JOB_DESCRIPTION=$(yq .galaxy_info.description < meta/main.yml)
    - echo $JOB_DESCRIPTION
    - echo "JOB_DESCRIPTION=$JOB_DESCRIPTION" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

#override to get a junit report
docker-trivy:
  script:
    - trivy image --clear-cache
    - export TRIVY_USERNAME=${DOCKER_REGISTRY_SNAPSHOT_USER:-${DOCKER_REGISTRY_USER:-$CI_REGISTRY_USER}}
    - export TRIVY_PASSWORD=${DOCKER_REGISTRY_SNAPSHOT_PASSWORD:-${DOCKER_REGISTRY_PASSWORD:-$CI_REGISTRY_PASSWORD}}
    - export basename=$(echo "${DOCKER_SNAPSHOT_IMAGE}" | sed 's|[/:]|_|g')
    - mkdir -p ./reports
    - trivy image --download-db-only
    - export trivy_opts="image"
    - export trivy_opts="${trivy_opts} --no-progress --severity ${DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD} ${DOCKER_TRIVY_ARGS}"
    - trivy ${trivy_opts} --format template --exit-code 0 --template "@/contrib/junit.tpl" --output reports/docker-trivy-${basename}.gitlab.xml $DOCKER_SNAPSHOT_IMAGE
    - trivy ${trivy_opts} --format table --exit-code 1 $DOCKER_SNAPSHOT_IMAGE
  artifacts:
    when: always
    reports:
      junit: "reports/docker-trivy-*.gitlab.xml"

docker-sbom:
  artifacts:
    name: "SBOM for docker from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    when: always
    paths:
      - "reports/docker-sbom-*.cyclonedx.json"
    reports:
      cyclonedx:
        - "reports/docker-sbom-*.cyclonedx.json"


galaxy-import:
  stage: publish
  image: $ANSIBLE_IMAGE
  script:
    - ansible-galaxy role import $GITHUB_USER $CI_PROJECT_NAME --token $ANSIBLE_GALAXY_TOKEN
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - vps


docker-pushrm:
  stage: publish
  image:
    name: $PUSHRM_CI_IMAGE
    entrypoint: ["/bin/sh", "-c", "/docker-pushrm"]
  variables:
    DOCKER_USER: $DOCKER_REGISTRY_RELEASE_USER
    DOCKER_PASS: $DOCKER_REGISTRY_RELEASE_PASSWORD
    PUSHRM_SHORT: $JOB_DESCRIPTION
    PUSHRM_TARGET: $REGISTRY_IMAGE
    PUSHRM_DEBUG: 1
    PUSHRM_FILE: $CI_PROJECT_DIR/README-dockerhub.md
  script: "/bin/true"
  tags:
    - vps
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

