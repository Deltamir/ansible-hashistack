---
- name: Enable kv-v1 secret engine
  hashivault_secret_engine:
    backend: kv
    name: hashistack/kv
    url: "{{ global_vault_address }}"
    state: enabled
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Retrieve Consul Gossip key if exist and ignore error if not
  community.hashi_vault.vault_kv1_get:
    engine_mount_point: hashistack/kv
    path: consul_gossip_key
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  ignore_errors: true
  register: consul_gossip_result
  run_once: true
  delegate_to: localhost

- name: Generate a consul encyption key
  ansible.builtin.command:
    cmd: openssl rand -base64 32
  register: encryption_key
  when: consul_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Write consul gossip encryption key
  hashivault_secret:
    secret: "consul_gossip_key"
    data:
      key: "{{ encryption_key.stdout }}"
      ttl: "{{ consul_template_gossip_key_ttl }}"
    verify: false
    version: 1
    mount_point: "hashistack/kv"
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
  when: consul_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Register Consul Gossip key if necessary (from stdout)
  ansible.builtin.set_fact:
    consul_raw_key: "{{ encryption_key.stdout }}"
  when: consul_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Register Consul Gossip key if necessary (from vault)
  ansible.builtin.set_fact:
    consul_raw_key: "{{ consul_gossip_result.data.key }}"
  when: not consul_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Retrieve Nomad Gossip key if exist and ignore error if not
  community.hashi_vault.vault_kv1_get:
    engine_mount_point: hashistack/kv
    path: nomad_gossip_key
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  ignore_errors: true
  register: nomad_gossip_result
  run_once: true
  delegate_to: localhost

- name: Generate a nomad encyption key
  ansible.builtin.command:
    cmd: openssl rand -base64 32
  register: encryption_key
  when: nomad_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Write nomad gossip encryption key
  hashivault_secret:
    secret: "nomad_gossip_key"
    data:
      key: "{{ encryption_key.stdout }}"
      ttl: "{{ consul_template_gossip_key_ttl }}"
    verify: false
    version: 1
    mount_point: "hashistack/kv"
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
  when: nomad_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Register Nomad Gossip key if necessary (from stdout)
  ansible.builtin.set_fact:
    nomad_encrypt: "{{ encryption_key.stdout }}"
  when: nomad_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Register Nomad Gossip key if necessary (from vault)
  ansible.builtin.set_fact:
    nomad_encrypt: "{{ nomad_gossip_result.data.key }}"
  when: not nomad_gossip_result['failed']
  run_once: true
  delegate_to: localhost

- name: Enable transit secret engine
  hashivault_secret_engine:
    backend: transit
    name: hashistack/transit
    url: "{{ global_vault_address }}"
    state: enabled
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Create autounseal secret
  community.hashi_vault.vault_write:
    path: hashistack/transit/keys/autounseal
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  run_once: true
  delegate_to: localhost

- name: Create autounseal policy
  hashivault_policy:
    name: autounseal
    rules_file: "{{ role_path }}/files/autounseal.hcl"
    url: "{{ global_vault_address }}"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Create a autounseal token
  community.hashi_vault.vault_token_create:
    policies: ["autounseal", "default"]
    orphan: true
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  register: autounseal_token
  run_once: true
  delegate_to: localhost

- name: Register autounseal token
  ansible.builtin.set_fact:
    vault_transit_token: "{{ autounseal_token.login.auth.client_token }}"
  run_once: true
  delegate_to: localhost

- name: Get CA cert if exist and ignore error if not
  hashivault_pki_cert_get:
    mount_point: hashistack/pki
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  register: root_ca_result
  ignore_errors: true
  run_once: true
  delegate_to: localhost

- name: Enable CA pki secret engine
  hashivault_secret_engine:
    name: hashistack/pki
    backend: pki
    url: "{{ global_vault_address }}"
    state: enabled
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  when: root_ca_result['data'] == {}
  delegate_to: localhost

- name: Generate root CA
  hashivault_pki_ca:
    url: "{{ global_vault_address }}"
    mount_point: hashistack/pki
    common_name: "global"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    kind: root
  register: root_ca_gen
  when: root_ca_result['data'] == {}
  delegate_to: localhost
  run_once: true

- name: Register root CA cert if necessary (from vault)
  ansible.builtin.set_fact:
    root_ca: "{{ root_ca_result.data.certificate }}"
  when: root_ca_result['data'] != {}
  run_once: true
  delegate_to: localhost

- name: Register root CA cert if necessary (from generation)
  ansible.builtin.set_fact:
    root_ca: "{{ root_ca_gen.data.certificate }}"
  when: root_ca_result['data'] == {}
  run_once: true
  delegate_to: localhost

- name: Configure CA and CRL URLs
  hashivault_pki_url:
    url: "{{ global_vault_address }}"
    mount_point: hashistack/pki
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    issuing_certificates:
      - "{{ global_vault_address }}/v1/pki/ca"
    crl_distribution_points:
      - "{{ global_vault_address }}/v1/pki/crl"
  run_once: true
  delegate_to: localhost

- name: Enable consul intermediate pki secret engine
  hashivault_secret_engine:
    name: hashistack/pki_int_consul
    backend: pki
    url: "{{ global_vault_address }}"
    state: enabled
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Generate consul intermediate CA CSR
  hashivault_pki_ca:
    url: "{{ global_vault_address }}"
    common_name: "home.consul Intermediate Authority"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    kind: intermediate
    config:
      max_ttl_lease: 43800h
    mount_point: hashistack/pki_int_consul
  run_once: true
  register: csr
  delegate_to: localhost

- name: Sign consul CSR
  hashivault_pki_cert_sign:
    common_name: "home.consul Intermediate Authority"
    url: "{{ global_vault_address }}"
    mount_point: hashistack/pki
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    csr: "{{ csr['data']['csr'] }}"
    type: intermediate
    extra_params:
      format: pem_bundle
      ttl: 43800h
  run_once: true
  register: certificate
  when: csr.changed # noqa: no-handler
  delegate_to: localhost

- name: Write consul signed certificate
  hashivault_pki_set_signed:
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    certificate: "{{ certificate['data']['certificate'] }}"
    mount_point: hashistack/pki_int_consul
  run_once: true
  when: csr.changed # noqa: no-handler
  delegate_to: localhost

- name: Register consul CA cert if necessary (from generation)
  ansible.builtin.set_fact:
    consul_ca: "{{ certificate['data']['certificate'] }}"
  when: csr.changed
  run_once: true
  delegate_to: localhost

- name: Get consul CA cert if exist and ignore error if not
  hashivault_pki_cert_get:
    mount_point: hashistack/pki_int_consul
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  register: consul_ca_result
  ignore_errors: true
  when: not csr.changed # noqa: no-handler
  run_once: true
  delegate_to: localhost

- name: Register consul CA cert if necessary (from vault)
  ansible.builtin.set_fact:
    consul_ca: "{{ consul_ca_result['data']['certificate'] }}"
  when: not csr.changed
  run_once: true
  delegate_to: localhost

- name: Create consul role
  hashivault_pki_role:
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    name: consul-home
    state: present
    mount_point: hashistack/pki_int_consul
    config:
      allow_subdomains: true
      allowed_domains: ["home.consul", "service.consul"]
      generate_lease: true
      max_ttl: "{{ consul_template_cert_ttl }}"
  run_once: true
  delegate_to: localhost

- name: Enable nomad intermediate pki secret engine
  hashivault_secret_engine:
    name: hashistack/pki_int_nomad
    backend: pki
    url: "{{ global_vault_address }}"
    state: enabled
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Generate nomad intermediate CA CSR
  hashivault_pki_ca:
    url: "{{ global_vault_address }}"
    common_name: "global.nomad Intermediate Authority"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    kind: intermediate
    config:
      max_ttl_lease: 43800h
    mount_point: hashistack/pki_int_nomad
  run_once: true
  register: csr
  delegate_to: localhost

- name: Sign nomad CSR
  hashivault_pki_cert_sign:
    common_name: "global.nomad Intermediate Authority"
    url: "{{ global_vault_address }}"
    mount_point: hashistack/pki
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    csr: "{{ csr['data']['csr'] }}"
    type: intermediate
    extra_params:
      format: pem_bundle
      ttl: 43800h
  run_once: true
  register: certificate
  when: csr.changed # noqa: no-handler
  delegate_to: localhost

- name: Write nomad signed certificate
  hashivault_pki_set_signed:
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    certificate: "{{ certificate['data']['certificate'] }}"
    mount_point: hashistack/pki_int_nomad
  run_once: true
  when: csr.changed # noqa: no-handler
  delegate_to: localhost

- name: Register nomad CA cert if necessary (from generation)
  ansible.builtin.set_fact:
    nomad_ca: "{{ certificate['data']['certificate'] }}"
  when: csr.changed
  run_once: true
  delegate_to: localhost

- name: Get nomad CA cert if exist and ignore error if not
  hashivault_pki_cert_get:
    mount_point: hashistack/pki_int_nomad
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  register: nomad_ca_result
  ignore_errors: true
  when: not csr.changed
  run_once: true
  delegate_to: localhost

- name: Register root CA cert if necessary (from generation)
  ansible.builtin.set_fact:
    nomad_ca: "{{ nomad_ca_result['data']['certificate'] }}"
  when: not csr.changed
  run_once: true
  delegate_to: localhost

- name: Create nomad role
  hashivault_pki_role:
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    name: nomad-home
    state: present
    mount_point: hashistack/pki_int_nomad
    config:
      allow_subdomains: true
      allowed_domains: ["global.nomad", "home.consul", "service.consul"]
      generate_lease: true
      max_ttl: "{{ consul_template_cert_ttl }}"
  run_once: true
  delegate_to: localhost

- name: Enable vault intermediate pki secret engine
  hashivault_secret_engine:
    name: hashistack/pki_int_vault
    backend: pki
    url: "{{ global_vault_address }}"
    state: enabled
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Generate vault intermediate CA CSR
  hashivault_pki_ca:
    url: "{{ global_vault_address }}"
    common_name: "vault.service.home.consul Intermediate Authority"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    kind: intermediate
    config:
      max_ttl_lease: 43800h
    mount_point: hashistack/pki_int_vault
  run_once: true
  register: csr
  delegate_to: localhost

- name: Sign vault CSR
  hashivault_pki_cert_sign:
    common_name: "vault.service.home.consul Intermediate Authority"
    url: "{{ global_vault_address }}"
    mount_point: hashistack/pki
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    csr: "{{ csr['data']['csr'] }}"
    type: intermediate
    extra_params:
      format: pem_bundle
      ttl: 43800h
  run_once: true
  register: certificate
  when: csr.changed # noqa: no-handler
  delegate_to: localhost

- name: Write vault signed certificate
  hashivault_pki_set_signed:
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    certificate: "{{ certificate['data']['certificate'] }}"
    mount_point: hashistack/pki_int_vault
  run_once: true
  when: csr.changed # noqa: no-handler
  delegate_to: localhost

- name: Register vault CA cert if necessary (from generation)
  ansible.builtin.set_fact:
    vault_ca: "{{ certificate['data']['certificate'] }}"
  when: csr.changed
  run_once: true
  delegate_to: localhost

- name: Get vault CA cert if exist and ignore error if not
  hashivault_pki_cert_get:
    mount_point: hashistack/pki_int_vault
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  register: vault_ca_result
  ignore_errors: true
  when: not csr.changed
  run_once: true
  delegate_to: localhost

- name: Register vault CA cert if necessary (from generation)
  ansible.builtin.set_fact:
    vault_ca: "{{ vault_ca_result['data']['certificate'] }}"
  when: not csr.changed
  run_once: true
  delegate_to: localhost

- name: Create vault role
  hashivault_pki_role:
    url: "{{ global_vault_address }}"
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
    name: vault-home
    state: present
    mount_point: hashistack/pki_int_vault
    config:
      allow_subdomains: true
      allowed_domains: ["service.home.consul", "service.consul"]
      generate_lease: true
      max_ttl: "{{ consul_template_cert_ttl }}"
  run_once: true
  delegate_to: localhost

- name: Create consul policy
  hashivault_policy:
    name: consul
    rules_file: "{{ role_path }}/files/consul-policy.hcl"
    url: "{{ global_vault_address }}"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Create a consul_token
  community.hashi_vault.vault_token_create:
    policies: ["consul", "default"]
    orphan: true
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  register: consul_token_wrapped
  delegate_to: localhost

- name: Register consul_token token
  ansible.builtin.set_fact:
    consul_token: "{{ consul_token_wrapped.login.auth.client_token }}"
  delegate_to: localhost

- name: Create nomad policy
  hashivault_policy:
    name: nomad
    rules_file: "{{ role_path }}/files/nomad-policy.hcl"
    url: "{{ global_vault_address }}"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Create a nomad_token
  community.hashi_vault.vault_token_create:
    policies: ["nomad", "default"]
    orphan: true
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  register: nomad_token_wrapped
  delegate_to: localhost

- name: Register nomad_token token
  ansible.builtin.set_fact:
    nomad_rotation_token: "{{ nomad_token_wrapped.login.auth.client_token }}"
  delegate_to: localhost

- name: Create vault policy
  hashivault_policy:
    name: vault
    rules_file: "{{ role_path }}/files/vault-policy.hcl"
    url: "{{ global_vault_address }}"
    state: present
    authtype: token
    token: "{{ global_vault_token }}"
    verify: false
  run_once: true
  delegate_to: localhost

- name: Create a vault_token
  community.hashi_vault.vault_token_create:
    policies: ["vault", "default"]
    orphan: true
    url: "{{ global_vault_address }}"
    auth_method: token
    token: "{{ global_vault_token }}"
  register: vault_token_wrapped
  delegate_to: localhost

- name: Register vault_token token
  ansible.builtin.set_fact:
    vault_rotation_token: "{{ vault_token_wrapped.login.auth.client_token }}"
  delegate_to: localhost
